// üß™ TEST DE CONEXI√ìN CON EL BACKEND REAL
// Ejecuta este archivo para probar que tu frontend se conecte correctamente con tu backend

import { apiUtils, productService, pedidoService } from './Services/apiServices';

// Funci√≥n para probar la conexi√≥n general
export const testAPIConnection = async () => {
  console.log('üöÄ Iniciando pruebas de conexi√≥n API...\n');
  
  try {
    // 1. Test de conectividad b√°sica
    console.log('1Ô∏è‚É£ Probando conectividad b√°sica...');
    const connectionTest = await apiUtils.testConnection();
    
    if (connectionTest.success) {
      console.log('‚úÖ Conexi√≥n exitosa con el backend!');
      console.log('üìä Datos recibidos:', connectionTest.data);
    } else {
      console.log('‚ùå Error de conexi√≥n:', connectionTest.error);
      return;
    }
    
    // 2. Test de productos
    console.log('\n2Ô∏è‚É£ Probando endpoint de productos...');
    const products = await productService.getAll();
    console.log('‚úÖ Productos cargados:', products.data?.length || 0, 'productos');
    if (products.data?.length > 0) {
      console.log('üìù Primer producto:', products.data[0]);
    }
    
    // 3. Test de pedidos
    console.log('\n3Ô∏è‚É£ Probando endpoint de pedidos...');
    const pedidos = await pedidoService.getAll();
    console.log('‚úÖ Pedidos cargados:', pedidos.data?.data?.length || 0, 'pedidos');
    if (pedidos.data?.data?.length > 0) {
      console.log('üìù Primer pedido:', pedidos.data.data[0]);
    }
    
    // 4. Test de filtrado de pedidos
    console.log('\n4Ô∏è‚É£ Probando filtros de pedidos...');
    const pedidosPendientes = await pedidoService.getByStatus('pendiente');
    console.log('‚úÖ Pedidos pendientes:', pedidosPendientes.data?.data?.length || 0);
    
    console.log('\nüéâ ¬°Todas las pruebas completadas exitosamente!');
    console.log('‚úÖ Tu frontend est√° conectado correctamente con el backend en Render');
    
  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error);
    console.log('\nüîß Posibles soluciones:');
    console.log('1. Verifica que tu backend en Render est√© funcionando');
    console.log('2. Revisa la URL en apiServices.js');
    console.log('3. Verifica que no haya problemas de CORS');
  }
};

// Funci√≥n para crear un producto de prueba
export const testCreateProduct = async () => {
  try {
    console.log('üß™ Creando producto de prueba...');
    
    const testProduct = {
      name: 'Producto de Prueba',
      description: 'Este es un producto creado para probar la conexi√≥n API',
      price: 9.99,
      category: 'comida',
      image: 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?w=300&h=200&fit=crop'
    };
    
    const result = await productService.create(testProduct);
    console.log('‚úÖ Producto creado exitosamente:', result.data);
    
    return result.data;
  } catch (error) {
    console.error('‚ùå Error creando producto:', error.response?.data || error.message);
  }
};

// Funci√≥n para crear un pedido de prueba
export const testCreateOrder = async () => {
  try {
    console.log('üß™ Creando pedido de prueba...');
    
    // Primero obtener algunos productos
    const products = await productService.getAll();
    if (!products.data || products.data.length === 0) {
      console.log('‚ö†Ô∏è No hay productos disponibles para crear un pedido');
      return;
    }
    
    const testOrder = {
      productIds: [products.data[0].id], // Usar el primer producto
      status: 'pendiente',
      table_id: 1,
      userId: 1
    };
    
    const result = await pedidoService.create(testOrder);
    console.log('‚úÖ Pedido creado exitosamente:', result.data);
    
    return result.data;
  } catch (error) {
    console.error('‚ùå Error creando pedido:', error.response?.data || error.message);
  }
};

// Para usar en la consola del navegador:
// import { testAPIConnection } from './testConnection.js';
// testAPIConnection();